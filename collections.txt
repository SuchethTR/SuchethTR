Write table from 1 to 20 and perfomr these operations : insert , sort , delete , search , update and reteive from List , Dictionary , Hashset , Queue and Stack.

List:
using System;
using System.Collections.Generic;

public class Example
{
    
    public static void Main(string[] args)
    {
        var num = new List<int>();
        Console.WriteLine("Enter the no of values to be inserted into the list:");
        int n = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("enter the values:");
        for (int i = 0; i < n; i++)
        {
            num.Add(Convert.ToInt32(Console.ReadLine()));
        }
        num.Sort();
        Console.WriteLine("Avaliable elements in list are:");
        foreach(int i in num)
        {
            Console.WriteLine(i);
        }
        num.Insert(2,5);
        num.Insert(3, 6);	
        Console.WriteLine("Avaliable elements in list after insert:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
        num.Remove(1);
        Console.WriteLine("Avaliable elements in list after delete:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
    }
}

output:
Enter the no of values to be inserted into the list:
5
enter the values:
3
2
1
5
4
Avaliable elements in list are:
1
2
3
4
5
Avaliable elements in list after insert:
1
2
5
6
3
4
5
Avaliable elements in list after delete:
2
5
6
3
4
5
-----------------------------------------------------------------------------------------------------------------------------------------------------
Queue:


using System;
using System.Collections.Generic;

public class Example
{

    public static void Main(string[] args)
    {
        Queue<int> num = new Queue<int>();
        Console.WriteLine("Enter the no of values to be inserted into the Queue:");
        int n = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("enter the values:");
        for (int i = 0; i < n; i++)
        {
            num.Enqueue(Convert.ToInt32(Console.ReadLine()));
        }
        Console.WriteLine("Avaliable elements in Queue are:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
        num.Dequeue();
        Console.WriteLine("Avaliable elements in Queue after delete:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
    }
}

output:
Enter the no of values to be inserted into the Queue:
5
enter the values:
1
2
3
4
5
Avaliable elements in Queue are:
1
2
3
4
5
Avaliable elements in Queue after delete:
2
3
4
5
-----------------------------------------------------------------------------------------------------------------------------------------------------
Stack:
using System;
using System.Collections.Generic;

public class Example
{

    public static void Main(string[] args)
    {
       Stack<int> num = new Stack<int>();
        Console.WriteLine("Enter the no of values to be inserted into the Stack:");
        int n = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("enter the values:");
        for (int i = 0; i < n; i++)
        {
            num.Push(Convert.ToInt32(Console.ReadLine()));
        }
        Console.WriteLine("Avaliable elements in Stack are:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
        num.Pop();
        Console.WriteLine("Avaliable elements in Stack after delete:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
    }
}

output:
Enter the no of values to be inserted into the Stack:
5
enter the values:
1
2
3
4
5
Avaliable elements in Stack are:
5
4
3
2
1
Avaliable elements in Stack after delete:
4
3
2
1
-----------------------------------------------------------------------------------------------------------------------------------------------------
Hash Set:
using System;
using System.Collections.Generic;

public class Example
{

    public static void Main(string[] args)
    {
       var num = new HashSet<int>();
        Console.WriteLine("Enter the no of values to be inserted into the HashSet:");
        int n = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("enter the values:");
        for (int i = 0; i < n; i++)
        {
            num.Add(Convert.ToInt32(Console.ReadLine()));
        }
        Console.WriteLine("Avaliable elements in Hashset are:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
        num.Remove(2);
        Console.WriteLine("Avaliable elements in Hashset after delete:");
        foreach (int i in num)
        {
            Console.WriteLine(i);
        }
    }
}

output:
Enter the no of values to be inserted into the HashSet:
4
enter the values:
1
2
3
4
Avaliable elements in Hashset are:
1
2
3
4
Avaliable elements in Hashset after delete:
1
3
4
-----------------------------------------------------------------------------------------------------------------------------------------------------
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
namespace SeleniumTest1
{
    class Sample1
    {
        IWebDriver driver = new ChromeDriver();
        public void Initialize()
        {
            driver.Navigate().GoToUrl("https://www.youtube.com/");
            //Maximize the browser window
            driver.Manage().Window.Maximize();
            Thread.Sleep(2000);
        }
        public void ExecuteTest()
        {
            IWebElement ele = driver.FindElement(By.Name("search_query"));
            ele.SendKeys("Selenium");
            Thread.Sleep(2000);
            IWebElement ele1 = driver.FindElement(By.Id("search-icon-legacy"));
            ele1.Click();
            Thread.Sleep(3000);
        }
        public void EndTest()
        {
            //close the browser
            driver.Close();
        }
        public static void Main()
        {
            Sample1 s = new Sample1();
            s.Initialize();
            s.ExecuteTest();
            s.EndTest();
        }
    }
}


google shopping website:
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
namespace SeleniumTest1
{
    class Sample1
    {
        IWebDriver driver = new ChromeDriver();
        public void Initialize()
        {
            driver.Navigate().GoToUrl("https://shopping.google.co.in/?nord=1");
            //Maximize the browser window
            driver.Manage().Window.Maximize();
            Thread.Sleep(2000);
        }
        public void ExecuteTest()
        {
            IWebElement ele = driver.FindElement(By.Name("FrV7Ge"));
            ele.SendKeys("Selenium");
            Thread.Sleep(2000);
            IWebElement ele = driver.FindElement(By.Name("QS8fR"));
            ele.SendKeys("Selenium");
         
            IWebElement ele1 = driver.FindElement(By.Id("z86TMb FNFY6c"));
            ele1.Click();
            Thread.Sleep(3000);
        }
        public void EndTest()
        {
            //close the browser
            driver.Close();
        }
        public static void Main()
        {
            Sample1 s = new Sample1();
            s.Initialize();
            s.ExecuteTest();
            s.EndTest();
        }
    }
}



login pages 
--------------
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Test;
public class LoginAutomation {
@Test
public void login() {
System.setProperty("webdriver.chrome.driver", "https://accounts.google.com/signin/v2/identifier?hl=en-GB&passive=true&continue=https%3A%2F%2Fshopping.google.co.in%2F%3Fnord%3D1%26gsx_auth_redirect%3Dtrue&ec=GAZAlAQ&flowName=GlifWebSignIn&flowEntry=ServiceLogin");
WebDriver driver=new ChromeDriver();
driver.manage().window().maximize();
driver.get("https://www.browserstack.com/users/sign_in");
WebElement username=driver.findElement(By.id("user_email_Login"));
WebElement password=driver.findElement(By.id("user_password"));
WebElement login=driver.findElement(By.name("commit"));
username.sendKeys("abc@gmail.com");
password.sendKeys("your_password");
login.click();
String actualUrl="https://live.browserstack.com/dashboard";
String expectedUrl= driver.getCurrentUrl();
Assert.assertEquals(expectedUrl,actualUrl);
}
}